// Generated by gencpp from file interprocess_communication/Update.msg
// DO NOT EDIT!


#ifndef INTERPROCESS_COMMUNICATION_MESSAGE_UPDATE_H
#define INTERPROCESS_COMMUNICATION_MESSAGE_UPDATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interprocess_communication
{
template <class ContainerAllocator>
struct Update_
{
  typedef Update_<ContainerAllocator> Type;

  Update_()
    : id()
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
    }
  Update_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::interprocess_communication::Update_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interprocess_communication::Update_<ContainerAllocator> const> ConstPtr;

}; // struct Update_

typedef ::interprocess_communication::Update_<std::allocator<void> > Update;

typedef boost::shared_ptr< ::interprocess_communication::Update > UpdatePtr;
typedef boost::shared_ptr< ::interprocess_communication::Update const> UpdateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interprocess_communication::Update_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interprocess_communication::Update_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::interprocess_communication::Update_<ContainerAllocator1> & lhs, const ::interprocess_communication::Update_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::interprocess_communication::Update_<ContainerAllocator1> & lhs, const ::interprocess_communication::Update_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace interprocess_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::interprocess_communication::Update_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interprocess_communication::Update_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interprocess_communication::Update_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interprocess_communication::Update_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interprocess_communication::Update_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interprocess_communication::Update_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interprocess_communication::Update_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f75c2c3acce4fa081cf281adab7dcc44";
  }

  static const char* value(const ::interprocess_communication::Update_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf75c2c3acce4fa08ULL;
  static const uint64_t static_value2 = 0x1cf281adab7dcc44ULL;
};

template<class ContainerAllocator>
struct DataType< ::interprocess_communication::Update_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interprocess_communication/Update";
  }

  static const char* value(const ::interprocess_communication::Update_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interprocess_communication::Update_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::interprocess_communication::Update_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interprocess_communication::Update_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Update_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interprocess_communication::Update_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interprocess_communication::Update_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERPROCESS_COMMUNICATION_MESSAGE_UPDATE_H
