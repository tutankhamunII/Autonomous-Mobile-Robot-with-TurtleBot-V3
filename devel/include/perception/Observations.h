// Generated by gencpp from file perception/Observations.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MESSAGE_OBSERVATIONS_H
#define PERCEPTION_MESSAGE_OBSERVATIONS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <perception/Observation.h>

namespace perception
{
template <class ContainerAllocator>
struct Observations_
{
  typedef Observations_<ContainerAllocator> Type;

  Observations_()
    : observations()  {
    }
  Observations_(const ContainerAllocator& _alloc)
    : observations(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::perception::Observation_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::perception::Observation_<ContainerAllocator> >> _observations_type;
  _observations_type observations;





  typedef boost::shared_ptr< ::perception::Observations_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception::Observations_<ContainerAllocator> const> ConstPtr;

}; // struct Observations_

typedef ::perception::Observations_<std::allocator<void> > Observations;

typedef boost::shared_ptr< ::perception::Observations > ObservationsPtr;
typedef boost::shared_ptr< ::perception::Observations const> ObservationsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception::Observations_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception::Observations_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception::Observations_<ContainerAllocator1> & lhs, const ::perception::Observations_<ContainerAllocator2> & rhs)
{
  return lhs.observations == rhs.observations;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception::Observations_<ContainerAllocator1> & lhs, const ::perception::Observations_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception::Observations_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception::Observations_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception::Observations_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception::Observations_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception::Observations_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception::Observations_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception::Observations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a77531c2f2c5a83066e66b6f9d29109c";
  }

  static const char* value(const ::perception::Observations_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa77531c2f2c5a830ULL;
  static const uint64_t static_value2 = 0x66e66b6f9d29109cULL;
};

template<class ContainerAllocator>
struct DataType< ::perception::Observations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception/Observations";
  }

  static const char* value(const ::perception::Observations_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception::Observations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Observation[] observations\n"
"\n"
"================================================================================\n"
"MSG: perception/Observation\n"
"float32 range\n"
"float32 bearing\n"
"int32 signature\n"
;
  }

  static const char* value(const ::perception::Observations_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception::Observations_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.observations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Observations_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception::Observations_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception::Observations_<ContainerAllocator>& v)
  {
    s << indent << "observations[]" << std::endl;
    for (size_t i = 0; i < v.observations.size(); ++i)
    {
      s << indent << "  observations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::perception::Observation_<ContainerAllocator> >::stream(s, indent + "    ", v.observations[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MESSAGE_OBSERVATIONS_H
