// Generated by gencpp from file perception/Observation.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MESSAGE_OBSERVATION_H
#define PERCEPTION_MESSAGE_OBSERVATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace perception
{
template <class ContainerAllocator>
struct Observation_
{
  typedef Observation_<ContainerAllocator> Type;

  Observation_()
    : range(0.0)
    , bearing(0.0)
    , signature(0)  {
    }
  Observation_(const ContainerAllocator& _alloc)
    : range(0.0)
    , bearing(0.0)
    , signature(0)  {
  (void)_alloc;
    }



   typedef float _range_type;
  _range_type range;

   typedef float _bearing_type;
  _bearing_type bearing;

   typedef int32_t _signature_type;
  _signature_type signature;





  typedef boost::shared_ptr< ::perception::Observation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception::Observation_<ContainerAllocator> const> ConstPtr;

}; // struct Observation_

typedef ::perception::Observation_<std::allocator<void> > Observation;

typedef boost::shared_ptr< ::perception::Observation > ObservationPtr;
typedef boost::shared_ptr< ::perception::Observation const> ObservationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception::Observation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception::Observation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception::Observation_<ContainerAllocator1> & lhs, const ::perception::Observation_<ContainerAllocator2> & rhs)
{
  return lhs.range == rhs.range &&
    lhs.bearing == rhs.bearing &&
    lhs.signature == rhs.signature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception::Observation_<ContainerAllocator1> & lhs, const ::perception::Observation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception::Observation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception::Observation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception::Observation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception::Observation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception::Observation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception::Observation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7165c5ad1f50337aff92e19e828b2b76";
  }

  static const char* value(const ::perception::Observation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7165c5ad1f50337aULL;
  static const uint64_t static_value2 = 0xff92e19e828b2b76ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception/Observation";
  }

  static const char* value(const ::perception::Observation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 range\n"
"float32 bearing\n"
"int32 signature\n"
;
  }

  static const char* value(const ::perception::Observation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception::Observation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.range);
      stream.next(m.bearing);
      stream.next(m.signature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Observation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception::Observation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception::Observation_<ContainerAllocator>& v)
  {
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
    s << indent << "bearing: ";
    Printer<float>::stream(s, indent + "  ", v.bearing);
    s << indent << "signature: ";
    Printer<int32_t>::stream(s, indent + "  ", v.signature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MESSAGE_OBSERVATION_H
